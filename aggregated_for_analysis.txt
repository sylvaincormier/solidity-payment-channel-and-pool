# Aggregated Project Information
Date: Sun  2 Feb 2025 07:08:11 EST

## Directory Structure
.
├── .git
│   ├── COMMIT_EDITMSG
│   ├── HEAD
│   ├── config
│   ├── description
│   ├── hooks
│   │   ├── applypatch-msg.sample
│   │   ├── commit-msg.sample
│   │   ├── fsmonitor-watchman.sample
│   │   ├── post-update.sample
│   │   ├── pre-applypatch.sample
│   │   ├── pre-commit.sample
│   │   ├── pre-merge-commit.sample
│   │   ├── pre-push.sample
│   │   ├── pre-rebase.sample
│   │   ├── pre-receive.sample
│   │   ├── prepare-commit-msg.sample
│   │   ├── push-to-checkout.sample
│   │   ├── sendemail-validate.sample
│   │   └── update.sample
│   ├── index
│   ├── info
│   │   └── exclude
│   ├── logs
│   │   ├── HEAD
│   │   └── refs
│   │       ├── heads
│   │       │   └── main
│   │       └── remotes
│   │           └── origin
│   │               ├── HEAD
│   │               └── main
│   ├── modules
│   │   └── lib
│   │       ├── forge-std
│   │       │   ├── HEAD
│   │       │   ├── config
│   │       │   ├── description
│   │       │   ├── hooks
│   │       │   │   ├── applypatch-msg.sample
│   │       │   │   ├── commit-msg.sample
│   │       │   │   ├── fsmonitor-watchman.sample
│   │       │   │   ├── post-update.sample
│   │       │   │   ├── pre-applypatch.sample
│   │       │   │   ├── pre-commit.sample
│   │       │   │   ├── pre-merge-commit.sample
│   │       │   │   ├── pre-push.sample
│   │       │   │   ├── pre-rebase.sample
│   │       │   │   ├── pre-receive.sample
│   │       │   │   ├── prepare-commit-msg.sample
│   │       │   │   ├── push-to-checkout.sample
│   │       │   │   ├── sendemail-validate.sample
│   │       │   │   └── update.sample
│   │       │   ├── index
│   │       │   ├── info
│   │       │   │   └── exclude
│   │       │   ├── logs
│   │       │   │   ├── HEAD
│   │       │   │   └── refs
│   │       │   │       ├── heads
│   │       │   │       │   └── master
│   │       │   │       └── remotes
│   │       │   │           └── origin
│   │       │   │               └── HEAD
│   │       │   ├── objects
│   │       │   │   ├── info
│   │       │   │   └── pack
│   │       │   │       ├── pack-28b3b73e11bbaa66636c8ddd64e33f0c02fef4ca.idx
│   │       │   │       ├── pack-28b3b73e11bbaa66636c8ddd64e33f0c02fef4ca.pack
│   │       │   │       └── pack-28b3b73e11bbaa66636c8ddd64e33f0c02fef4ca.rev
│   │       │   ├── packed-refs
│   │       │   └── refs
│   │       │       ├── heads
│   │       │       │   └── master
│   │       │       ├── remotes
│   │       │       │   └── origin
│   │       │       │       └── HEAD
│   │       │       └── tags
│   │       └── openzeppelin-contracts
│   │           ├── HEAD
│   │           ├── config
│   │           ├── description
│   │           ├── hooks
│   │           │   ├── applypatch-msg.sample
│   │           │   ├── commit-msg.sample
│   │           │   ├── fsmonitor-watchman.sample
│   │           │   ├── post-update.sample
│   │           │   ├── pre-applypatch.sample
│   │           │   ├── pre-commit.sample
│   │           │   ├── pre-merge-commit.sample
│   │           │   ├── pre-push.sample
│   │           │   ├── pre-rebase.sample
│   │           │   ├── pre-receive.sample
│   │           │   ├── prepare-commit-msg.sample
│   │           │   ├── push-to-checkout.sample
│   │           │   ├── sendemail-validate.sample
│   │           │   └── update.sample
│   │           ├── index
│   │           ├── info
│   │           │   └── exclude
│   │           ├── logs
│   │           │   ├── HEAD
│   │           │   └── refs
│   │           │       ├── heads
│   │           │       │   └── master
│   │           │       └── remotes
│   │           │           └── origin
│   │           │               └── HEAD
│   │           ├── modules
│   │           │   └── lib
│   │           │       ├── erc4626-tests
│   │           │       │   ├── HEAD
│   │           │       │   ├── config
│   │           │       │   ├── description
│   │           │       │   ├── hooks
│   │           │       │   │   ├── applypatch-msg.sample
│   │           │       │   │   ├── commit-msg.sample
│   │           │       │   │   ├── fsmonitor-watchman.sample
│   │           │       │   │   ├── post-update.sample
│   │           │       │   │   ├── pre-applypatch.sample
│   │           │       │   │   ├── pre-commit.sample
│   │           │       │   │   ├── pre-merge-commit.sample
│   │           │       │   │   ├── pre-push.sample
│   │           │       │   │   ├── pre-rebase.sample
│   │           │       │   │   ├── pre-receive.sample
│   │           │       │   │   ├── prepare-commit-msg.sample
│   │           │       │   │   ├── push-to-checkout.sample
│   │           │       │   │   ├── sendemail-validate.sample
│   │           │       │   │   └── update.sample
│   │           │       │   ├── index
│   │           │       │   ├── info
│   │           │       │   │   └── exclude
│   │           │       │   ├── logs
│   │           │       │   │   ├── HEAD
│   │           │       │   │   └── refs
│   │           │       │   │       ├── heads
│   │           │       │   │       │   └── main
│   │           │       │   │       └── remotes
│   │           │       │   │           └── origin
│   │           │       │   │               └── HEAD
│   │           │       │   ├── objects
│   │           │       │   │   ├── info
│   │           │       │   │   └── pack
│   │           │       │   │       ├── pack-add9943e26a22c775d6390826bbb6dfa6921baca.idx
│   │           │       │   │       ├── pack-add9943e26a22c775d6390826bbb6dfa6921baca.pack
│   │           │       │   │       └── pack-add9943e26a22c775d6390826bbb6dfa6921baca.rev
│   │           │       │   ├── packed-refs
│   │           │       │   └── refs
│   │           │       │       ├── heads
│   │           │       │       │   └── main
│   │           │       │       ├── remotes
│   │           │       │       │   └── origin
│   │           │       │       │       └── HEAD
│   │           │       │       └── tags
│   │           │       ├── forge-std
│   │           │       │   ├── HEAD
│   │           │       │   ├── config
│   │           │       │   ├── description
│   │           │       │   ├── hooks
│   │           │       │   │   ├── applypatch-msg.sample
│   │           │       │   │   ├── commit-msg.sample
│   │           │       │   │   ├── fsmonitor-watchman.sample
│   │           │       │   │   ├── post-update.sample
│   │           │       │   │   ├── pre-applypatch.sample
│   │           │       │   │   ├── pre-commit.sample
│   │           │       │   │   ├── pre-merge-commit.sample
│   │           │       │   │   ├── pre-push.sample
│   │           │       │   │   ├── pre-rebase.sample
│   │           │       │   │   ├── pre-receive.sample
│   │           │       │   │   ├── prepare-commit-msg.sample
│   │           │       │   │   ├── push-to-checkout.sample
│   │           │       │   │   ├── sendemail-validate.sample
│   │           │       │   │   └── update.sample
│   │           │       │   ├── index
│   │           │       │   ├── info
│   │           │       │   │   └── exclude
│   │           │       │   ├── logs
│   │           │       │   │   ├── HEAD
│   │           │       │   │   └── refs
│   │           │       │   │       ├── heads
│   │           │       │   │       │   └── master
│   │           │       │   │       └── remotes
│   │           │       │   │           └── origin
│   │           │       │   │               └── HEAD
│   │           │       │   ├── modules
│   │           │       │   │   └── lib
│   │           │       │   │       └── ds-test
│   │           │       │   │           ├── HEAD
│   │           │       │   │           ├── config
│   │           │       │   │           ├── description
│   │           │       │   │           ├── hooks
│   │           │       │   │           │   ├── applypatch-msg.sample
│   │           │       │   │           │   ├── commit-msg.sample
│   │           │       │   │           │   ├── fsmonitor-watchman.sample
│   │           │       │   │           │   ├── post-update.sample
│   │           │       │   │           │   ├── pre-applypatch.sample
│   │           │       │   │           │   ├── pre-commit.sample
│   │           │       │   │           │   ├── pre-merge-commit.sample
│   │           │       │   │           │   ├── pre-push.sample
│   │           │       │   │           │   ├── pre-rebase.sample
│   │           │       │   │           │   ├── pre-receive.sample
│   │           │       │   │           │   ├── prepare-commit-msg.sample
│   │           │       │   │           │   ├── push-to-checkout.sample
│   │           │       │   │           │   ├── sendemail-validate.sample
│   │           │       │   │           │   └── update.sample
│   │           │       │   │           ├── index
│   │           │       │   │           ├── info
│   │           │       │   │           │   └── exclude
│   │           │       │   │           ├── logs
│   │           │       │   │           │   ├── HEAD
│   │           │       │   │           │   └── refs
│   │           │       │   │           │       ├── heads
│   │           │       │   │           │       │   └── master
│   │           │       │   │           │       └── remotes
│   │           │       │   │           │           └── origin
│   │           │       │   │           │               └── HEAD
│   │           │       │   │           ├── objects
│   │           │       │   │           │   ├── info
│   │           │       │   │           │   └── pack
│   │           │       │   │           │       ├── pack-7f56f56907d0ef629b2e0344644d535164a3c5c8.idx
│   │           │       │   │           │       ├── pack-7f56f56907d0ef629b2e0344644d535164a3c5c8.pack
│   │           │       │   │           │       └── pack-7f56f56907d0ef629b2e0344644d535164a3c5c8.rev
│   │           │       │   │           ├── packed-refs
│   │           │       │   │           └── refs
│   │           │       │   │               ├── heads
│   │           │       │   │               │   └── master
│   │           │       │   │               ├── remotes
│   │           │       │   │               │   └── origin
│   │           │       │   │               │       └── HEAD
│   │           │       │   │               └── tags
│   │           │       │   ├── objects
│   │           │       │   │   ├── info
│   │           │       │   │   └── pack
│   │           │       │   │       ├── pack-28b3b73e11bbaa66636c8ddd64e33f0c02fef4ca.idx
│   │           │       │   │       ├── pack-28b3b73e11bbaa66636c8ddd64e33f0c02fef4ca.pack
│   │           │       │   │       └── pack-28b3b73e11bbaa66636c8ddd64e33f0c02fef4ca.rev
│   │           │       │   ├── packed-refs
│   │           │       │   └── refs
│   │           │       │       ├── heads
│   │           │       │       │   └── master
│   │           │       │       ├── remotes
│   │           │       │       │   └── origin
│   │           │       │       │       └── HEAD
│   │           │       │       └── tags
│   │           │       └── halmos-cheatcodes
│   │           │           ├── HEAD
│   │           │           ├── config
│   │           │           ├── description
│   │           │           ├── hooks
│   │           │           │   ├── applypatch-msg.sample
│   │           │           │   ├── commit-msg.sample
│   │           │           │   ├── fsmonitor-watchman.sample
│   │           │           │   ├── post-update.sample
│   │           │           │   ├── pre-applypatch.sample
│   │           │           │   ├── pre-commit.sample
│   │           │           │   ├── pre-merge-commit.sample
│   │           │           │   ├── pre-push.sample
│   │           │           │   ├── pre-rebase.sample
│   │           │           │   ├── pre-receive.sample
│   │           │           │   ├── prepare-commit-msg.sample
│   │           │           │   ├── push-to-checkout.sample
│   │           │           │   ├── sendemail-validate.sample
│   │           │           │   └── update.sample
│   │           │           ├── index
│   │           │           ├── info
│   │           │           │   └── exclude
│   │           │           ├── logs
│   │           │           │   ├── HEAD
│   │           │           │   └── refs
│   │           │           │       ├── heads
│   │           │           │       │   └── main
│   │           │           │       └── remotes
│   │           │           │           └── origin
│   │           │           │               └── HEAD
│   │           │           ├── objects
│   │           │           │   ├── info
│   │           │           │   └── pack
│   │           │           │       ├── pack-cd9caf41e684eb514cdb836a8b3a97c84ef519d4.idx
│   │           │           │       ├── pack-cd9caf41e684eb514cdb836a8b3a97c84ef519d4.pack
│   │           │           │       └── pack-cd9caf41e684eb514cdb836a8b3a97c84ef519d4.rev
│   │           │           ├── packed-refs
│   │           │           └── refs
│   │           │               ├── heads
│   │           │               │   └── main
│   │           │               ├── remotes
│   │           │               │   └── origin
│   │           │               │       └── HEAD
│   │           │               └── tags
│   │           ├── objects
│   │           │   ├── info
│   │           │   └── pack
│   │           │       ├── pack-a9437e82ef04e76239bc8efaccd6feeecc01cb18.idx
│   │           │       ├── pack-a9437e82ef04e76239bc8efaccd6feeecc01cb18.pack
│   │           │       └── pack-a9437e82ef04e76239bc8efaccd6feeecc01cb18.rev
│   │           ├── packed-refs
│   │           └── refs
│   │               ├── heads
│   │               │   └── master
│   │               ├── remotes
│   │               │   └── origin
│   │               │       └── HEAD
│   │               └── tags
│   ├── objects
│   │   ├── 07
│   │   │   └── 00c9f475a29733336d8997505bf40e48784a14
│   │   ├── 0a
│   │   │   └── 928bc8e8de18a5490799a9b7c8f7706686683e
│   │   ├── 0e
│   │   │   └── 5b90d613b1cc5063f513ca4450e30eb1cd4dd6
│   │   ├── 0f
│   │   │   └── c147a0c7e7891303316c346c801277adade6ff
│   │   ├── 20
│   │   │   └── 06ed80ed8d1a1f7070b99ced83609fae3240fb
│   │   ├── 23
│   │   │   └── 582a3b004983173c9db3a90c3b1bf343fb3cc6
│   │   ├── 25
│   │   │   └── b918f9c9a96afb107fd052f6aa5cbacc3d5111
│   │   ├── 27
│   │   │   └── d13adbf3eb8c7422ed2e416c54bf2af4f99f42
│   │   ├── 31
│   │   │   └── fcf45f5181a1fc3d20e837beaba252a1487326
│   │   ├── 33
│   │   │   └── 95d550d7e0ebc70af8e867d3a90f226d3fc316
│   │   ├── 34
│   │   │   └── a4a527be6f9a3d077a35c15b500c3ca3570a67
│   │   ├── 37
│   │   │   └── 92f48e5c11c6218f593813673894416e3628ca
│   │   ├── 39
│   │   │   └── 621ae1842ff5db0b0d6c3344f1b3ef29c4e374
│   │   ├── 3c
│   │   │   └── 257901a3856db74c58c7bf55af160c9430ee73
│   │   ├── 42
│   │   │   └── 19aa11e148d7d9448f78c212173a6c5271a5ec
│   │   ├── 44
│   │   │   ├── 144866b33d32370e067bd0f343ad2c868590ed
│   │   │   └── 450c968e1a78d3a40b3b5791df82558bce08b4
│   │   ├── 49
│   │   │   └── 1bfad16a54b2d8521e4a3417c6c77ea89a1af2
│   │   ├── 4b
│   │   │   └── 64c5cefbf29c7a6552120d6df10d000567714c
│   │   ├── 4c
│   │   │   └── 8a84e50c73815e326b9b3b8adbe3323efd0757
│   │   ├── 4f
│   │   │   └── 6eb729b1c8a4a0e67a6605870214a7565f206d
│   │   ├── 54
│   │   │   ├── 39d840e095f077faf6fd8a5995bd6c5f5727c4
│   │   │   └── b724f7ae76648d64671d4119d85de8a95ec463
│   │   ├── 55
│   │   │   └── 544761ef85ff7cd34f9abda5e12c8de91c4e2c
│   │   ├── 56
│   │   │   └── acbf0b1bbd7cc2bbc5c82b15408be21dd275cf
│   │   ├── 59
│   │   │   └── 57c702dd82dafd478674a25ffd463a9b20197f
│   │   ├── 69
│   │   │   └── 0924b6ac719b05a808820b80a49be3329f199e
│   │   ├── 6a
│   │   │   └── f8ae6b062185fb33701c4723cc6a9fe6bf1eb5
│   │   ├── 6b
│   │   │   └── 5a942f03e2610fa436d69d1c550c24ce84aa75
│   │   ├── 70
│   │   │   └── 60bafe594d41019af1f6cfe25c00644bc4b0af
│   │   ├── 74
│   │   │   └── 2e2d49911aae8ac97cc15a2ca44692da31dccc
│   │   ├── 75
│   │   │   └── 317632b8c94ac3ea5051679b47ad463b0f6c11
│   │   ├── 85
│   │   │   └── 198aaa55b84c0390b360ea2ba730087a9fcf49
│   │   ├── 86
│   │   │   └── 8432abd0c2da5756b5dd311e51455d434b9ac0
│   │   ├── 88
│   │   │   └── 8d42dcd903c00f4103f1ae558eb8d1b6e1ea8d
│   │   ├── 8e
│   │   │   └── 2e54b26c2e8fb0be7b6ac29ac4a85b847b438d
│   │   ├── 92
│   │   │   └── 65b4558406aee6c1a1554f2379ffa4d897be46
│   │   ├── a1
│   │   │   └── 45cadf2120ff3c09b5f227ce29a09f47db3a4e
│   │   ├── a9
│   │   │   └── 2b7cf0c1e6002d145319c9920d2d077f51cdfa
│   │   ├── aa
│   │   │   └── 366768ad8dc9ee7fff0c476c6ee0d4f911d128
│   │   ├── ad
│   │   │   ├── d52da9f26db66f52e52d07f4fd962fe0e934f5
│   │   │   └── ed7997b0c359a8230744058a80043b99bf6857
│   │   ├── b3
│   │   │   └── 127441a89454b562846eea27910132e0a4fd6c
│   │   ├── b4
│   │   │   └── 25adfa97f5d4dc1901d8f315c5d773c96fe260
│   │   ├── b5
│   │   │   └── 52830cb475a3ce7c1004023ac3f9b146a84e1b
│   │   ├── c5
│   │   │   └── b643fb80a1f1b03736810fa0c0d48496b6657e
│   │   ├── cd
│   │   │   └── c1fe9a1ba2506793e4b083f40c64d13cb77ce2
│   │   ├── d8
│   │   │   └── 843e6f620de38097f87e2b9e669d3398f4e041
│   │   ├── e3
│   │   │   └── 1ca05d7e21409ff60c093dd77ff1f76ea68a2b
│   │   ├── e6
│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391
│   │   ├── f8
│   │   │   ├── 840c1dc1ff23cbe3bcea43d487b2f4e7a1ddfa
│   │   │   └── c7c9197ef67b6567c0fdb541df4666e87feb92
│   │   ├── info
│   │   └── pack
│   │       ├── pack-354a0a07fa645fe9b5141581926eadac234deb03.idx
│   │       ├── pack-354a0a07fa645fe9b5141581926eadac234deb03.pack
│   │       └── pack-354a0a07fa645fe9b5141581926eadac234deb03.rev
│   ├── packed-refs
│   └── refs
│       ├── heads
│       │   └── main
│       ├── remotes
│       │   └── origin
│       │       ├── HEAD
│       │       └── main
│       └── tags
├── .github
│   └── workflows
│       └── test.yml
├── .gitignore
├── .gitmodules
├── README.md
├── aggregate.sh
├── aggregated_for_analysis.txt
├── cache
│   ├── solidity-files-cache.json
│   └── test-failures
├── diff.txt
├── foundry.toml
├── lib
│   ├── forge-std
│   │   ├── .git
│   │   ├── .gitattributes
│   │   ├── .github
│   │   │   └── workflows
│   │   │       ├── ci.yml
│   │   │       └── sync.yml
│   │   ├── .gitignore
│   │   ├── CONTRIBUTING.md
│   │   ├── LICENSE-APACHE
│   │   ├── LICENSE-MIT
│   │   ├── README.md
│   │   ├── foundry.toml
│   │   ├── package.json
│   │   ├── scripts
│   │   │   └── vm.py
│   │   ├── src
│   │   │   ├── Base.sol
│   │   │   ├── Script.sol
│   │   │   ├── StdAssertions.sol
│   │   │   ├── StdChains.sol
│   │   │   ├── StdCheats.sol
│   │   │   ├── StdError.sol
│   │   │   ├── StdInvariant.sol
│   │   │   ├── StdJson.sol
│   │   │   ├── StdMath.sol
│   │   │   ├── StdStorage.sol
│   │   │   ├── StdStyle.sol
│   │   │   ├── StdToml.sol
│   │   │   ├── StdUtils.sol
│   │   │   ├── Test.sol
│   │   │   ├── Vm.sol
│   │   │   ├── console.sol
│   │   │   ├── console2.sol
│   │   │   ├── interfaces
│   │   │   │   ├── IERC1155.sol
│   │   │   │   ├── IERC165.sol
│   │   │   │   ├── IERC20.sol
│   │   │   │   ├── IERC4626.sol
│   │   │   │   ├── IERC721.sol
│   │   │   │   └── IMulticall3.sol
│   │   │   └── safeconsole.sol
│   │   └── test
│   │       ├── StdAssertions.t.sol
│   │       ├── StdChains.t.sol
│   │       ├── StdCheats.t.sol
│   │       ├── StdError.t.sol
│   │       ├── StdJson.t.sol
│   │       ├── StdMath.t.sol
│   │       ├── StdStorage.t.sol
│   │       ├── StdStyle.t.sol
│   │       ├── StdToml.t.sol
│   │       ├── StdUtils.t.sol
│   │       ├── Vm.t.sol
│   │       ├── compilation
│   │       │   ├── CompilationScript.sol
│   │       │   ├── CompilationScriptBase.sol
│   │       │   ├── CompilationTest.sol
│   │       │   └── CompilationTestBase.sol
│   │       └── fixtures
│   │           ├── broadcast.log.json
│   │           ├── test.json
│   │           └── test.toml
│   └── openzeppelin-contracts
│       ├── .changeset
│       │   └── config.json
│       ├── .codecov.yml
│       ├── .editorconfig
│       ├── .eslintrc
│       ├── .git
│       ├── .github
│       │   ├── ISSUE_TEMPLATE
│       │   │   ├── bug_report.md
│       │   │   ├── config.yml
│       │   │   └── feature_request.md
│       │   ├── PULL_REQUEST_TEMPLATE.md
│       │   ├── actions
│       │   │   ├── gas-compare
│       │   │   │   └── action.yml
│       │   │   ├── setup
│       │   │   │   └── action.yml
│       │   │   └── storage-layout
│       │   │       └── action.yml
│       │   └── workflows
│       │       ├── actionlint.yml
│       │       ├── changeset.yml
│       │       ├── checks.yml
│       │       ├── docs.yml
│       │       ├── formal-verification.yml
│       │       ├── release-cycle.yml
│       │       └── upgradeable.yml
│       ├── .gitignore
│       ├── .gitmodules
│       ├── .mocharc.js
│       ├── .prettierrc
│       ├── .solcover.js
│       ├── .solhint.json
│       ├── CHANGELOG.md
│       ├── CODE_OF_CONDUCT.md
│       ├── CONTRIBUTING.md
│       ├── GUIDELINES.md
│       ├── LICENSE
│       ├── README.md
│       ├── RELEASING.md
│       ├── SECURITY.md
│       ├── audits
│       │   ├── 2017-03.md
│       │   ├── 2018-10.pdf
│       │   ├── 2022-10-Checkpoints.pdf
│       │   ├── 2022-10-ERC4626.pdf
│       │   ├── 2023-05-v4.9.pdf
│       │   └── README.md
│       ├── certora
│       │   ├── .gitignore
│       │   ├── Makefile
│       │   ├── README.md
│       │   ├── diff
│       │   │   └── token_ERC721_ERC721.sol.patch
│       │   ├── harnesses
│       │   │   ├── AccessControlDefaultAdminRulesHarness.sol
│       │   │   ├── AccessControlHarness.sol
│       │   │   ├── DoubleEndedQueueHarness.sol
│       │   │   ├── ERC20FlashMintHarness.sol
│       │   │   ├── ERC20PermitHarness.sol
│       │   │   ├── ERC20WrapperHarness.sol
│       │   │   ├── ERC3156FlashBorrowerHarness.sol
│       │   │   ├── ERC721Harness.sol
│       │   │   ├── ERC721ReceiverHarness.sol
│       │   │   ├── EnumerableMapHarness.sol
│       │   │   ├── EnumerableSetHarness.sol
│       │   │   ├── InitializableHarness.sol
│       │   │   ├── Ownable2StepHarness.sol
│       │   │   ├── OwnableHarness.sol
│       │   │   ├── PausableHarness.sol
│       │   │   └── TimelockControllerHarness.sol
│       │   ├── reports
│       │   │   ├── 2021-10.pdf
│       │   │   ├── 2022-03.pdf
│       │   │   └── 2022-05.pdf
│       │   ├── run.js
│       │   ├── specs
│       │   │   ├── AccessControl.spec
│       │   │   ├── AccessControlDefaultAdminRules.spec
│       │   │   ├── DoubleEndedQueue.spec
│       │   │   ├── ERC20.spec
│       │   │   ├── ERC20FlashMint.spec
│       │   │   ├── ERC20Wrapper.spec
│       │   │   ├── ERC721.spec
│       │   │   ├── EnumerableMap.spec
│       │   │   ├── EnumerableSet.spec
│       │   │   ├── Initializable.spec
│       │   │   ├── Ownable.spec
│       │   │   ├── Ownable2Step.spec
│       │   │   ├── Pausable.spec
│       │   │   ├── TimelockController.spec
│       │   │   ├── helpers
│       │   │   │   └── helpers.spec
│       │   │   └── methods
│       │   │       ├── IAccessControl.spec
│       │   │       ├── IAccessControlDefaultAdminRules.spec
│       │   │       ├── IERC20.spec
│       │   │       ├── IERC2612.spec
│       │   │       ├── IERC3156.spec
│       │   │       ├── IERC5313.spec
│       │   │       ├── IERC721.spec
│       │   │       ├── IOwnable.spec
│       │   │       └── IOwnable2Step.spec
│       │   └── specs.json
│       ├── contracts
│       │   ├── access
│       │   │   ├── AccessControl.sol
│       │   │   ├── AccessControlCrossChain.sol
│       │   │   ├── AccessControlDefaultAdminRules.sol
│       │   │   ├── AccessControlEnumerable.sol
│       │   │   ├── IAccessControl.sol
│       │   │   ├── IAccessControlDefaultAdminRules.sol
│       │   │   ├── IAccessControlEnumerable.sol
│       │   │   ├── Ownable.sol
│       │   │   ├── Ownable2Step.sol
│       │   │   └── README.adoc
│       │   ├── crosschain
│       │   │   ├── CrossChainEnabled.sol
│       │   │   ├── README.adoc
│       │   │   ├── amb
│       │   │   │   ├── CrossChainEnabledAMB.sol
│       │   │   │   └── LibAMB.sol
│       │   │   ├── arbitrum
│       │   │   │   ├── CrossChainEnabledArbitrumL1.sol
│       │   │   │   ├── CrossChainEnabledArbitrumL2.sol
│       │   │   │   ├── LibArbitrumL1.sol
│       │   │   │   └── LibArbitrumL2.sol
│       │   │   ├── errors.sol
│       │   │   ├── optimism
│       │   │   │   ├── CrossChainEnabledOptimism.sol
│       │   │   │   └── LibOptimism.sol
│       │   │   └── polygon
│       │   │       └── CrossChainEnabledPolygonChild.sol
│       │   ├── finance
│       │   │   ├── PaymentSplitter.sol
│       │   │   ├── README.adoc
│       │   │   └── VestingWallet.sol
│       │   ├── governance
│       │   │   ├── Governor.sol
│       │   │   ├── IGovernor.sol
│       │   │   ├── README.adoc
│       │   │   ├── TimelockController.sol
│       │   │   ├── compatibility
│       │   │   │   ├── GovernorCompatibilityBravo.sol
│       │   │   │   └── IGovernorCompatibilityBravo.sol
│       │   │   ├── extensions
│       │   │   │   ├── GovernorCountingSimple.sol
│       │   │   │   ├── GovernorPreventLateQuorum.sol
│       │   │   │   ├── GovernorProposalThreshold.sol
│       │   │   │   ├── GovernorSettings.sol
│       │   │   │   ├── GovernorTimelockCompound.sol
│       │   │   │   ├── GovernorTimelockControl.sol
│       │   │   │   ├── GovernorVotes.sol
│       │   │   │   ├── GovernorVotesComp.sol
│       │   │   │   ├── GovernorVotesQuorumFraction.sol
│       │   │   │   └── IGovernorTimelock.sol
│       │   │   └── utils
│       │   │       ├── IVotes.sol
│       │   │       └── Votes.sol
│       │   ├── interfaces
│       │   │   ├── IERC1155.sol
│       │   │   ├── IERC1155MetadataURI.sol
│       │   │   ├── IERC1155Receiver.sol
│       │   │   ├── IERC1271.sol
│       │   │   ├── IERC1363.sol
│       │   │   ├── IERC1363Receiver.sol
│       │   │   ├── IERC1363Spender.sol
│       │   │   ├── IERC165.sol
│       │   │   ├── IERC1820Implementer.sol
│       │   │   ├── IERC1820Registry.sol
│       │   │   ├── IERC1967.sol
│       │   │   ├── IERC20.sol
│       │   │   ├── IERC20Metadata.sol
│       │   │   ├── IERC2309.sol
│       │   │   ├── IERC2612.sol
│       │   │   ├── IERC2981.sol
│       │   │   ├── IERC3156.sol
│       │   │   ├── IERC3156FlashBorrower.sol
│       │   │   ├── IERC3156FlashLender.sol
│       │   │   ├── IERC4626.sol
│       │   │   ├── IERC4906.sol
│       │   │   ├── IERC5267.sol
│       │   │   ├── IERC5313.sol
│       │   │   ├── IERC5805.sol
│       │   │   ├── IERC6372.sol
│       │   │   ├── IERC721.sol
│       │   │   ├── IERC721Enumerable.sol
│       │   │   ├── IERC721Metadata.sol
│       │   │   ├── IERC721Receiver.sol
│       │   │   ├── IERC777.sol
│       │   │   ├── IERC777Recipient.sol
│       │   │   ├── IERC777Sender.sol
│       │   │   ├── README.adoc
│       │   │   ├── draft-IERC1822.sol
│       │   │   └── draft-IERC2612.sol
│       │   ├── metatx
│       │   │   ├── ERC2771Context.sol
│       │   │   ├── MinimalForwarder.sol
│       │   │   └── README.adoc
│       │   ├── mocks
│       │   │   ├── AccessControlCrossChainMock.sol
│       │   │   ├── ArraysMock.sol
│       │   │   ├── CallReceiverMock.sol
│       │   │   ├── ConditionalEscrowMock.sol
│       │   │   ├── ContextMock.sol
│       │   │   ├── DummyImplementation.sol
│       │   │   ├── EIP712Verifier.sol
│       │   │   ├── ERC1271WalletMock.sol
│       │   │   ├── ERC165
│       │   │   │   ├── ERC165MaliciousData.sol
│       │   │   │   ├── ERC165MissingData.sol
│       │   │   │   ├── ERC165NotSupported.sol
│       │   │   │   └── ERC165ReturnBomb.sol
│       │   │   ├── ERC20Mock.sol
│       │   │   ├── ERC20Reentrant.sol
│       │   │   ├── ERC2771ContextMock.sol
│       │   │   ├── ERC3156FlashBorrowerMock.sol
│       │   │   ├── ERC4626Mock.sol
│       │   │   ├── EtherReceiverMock.sol
│       │   │   ├── InitializableMock.sol
│       │   │   ├── MulticallTest.sol
│       │   │   ├── MultipleInheritanceInitializableMocks.sol
│       │   │   ├── PausableMock.sol
│       │   │   ├── PullPaymentMock.sol
│       │   │   ├── ReentrancyAttack.sol
│       │   │   ├── ReentrancyMock.sol
│       │   │   ├── RegressionImplementation.sol
│       │   │   ├── SafeMathMemoryCheck.sol
│       │   │   ├── SingleInheritanceInitializableMocks.sol
│       │   │   ├── StorageSlotMock.sol
│       │   │   ├── TimelockReentrant.sol
│       │   │   ├── TimersBlockNumberImpl.sol
│       │   │   ├── TimersTimestampImpl.sol
│       │   │   ├── VotesMock.sol
│       │   │   ├── compound
│       │   │   │   └── CompTimelock.sol
│       │   │   ├── crosschain
│       │   │   │   ├── bridges.sol
│       │   │   │   └── receivers.sol
│       │   │   ├── docs
│       │   │   │   ├── ERC4626Fees.sol
│       │   │   │   └── governance
│       │   │   │       ├── MyGovernor.sol
│       │   │   │       ├── MyToken.sol
│       │   │   │       ├── MyTokenTimestampBased.sol
│       │   │   │       └── MyTokenWrapped.sol
│       │   │   ├── governance
│       │   │   │   ├── GovernorCompMock.sol
│       │   │   │   ├── GovernorCompatibilityBravoMock.sol
│       │   │   │   ├── GovernorMock.sol
│       │   │   │   ├── GovernorPreventLateQuorumMock.sol
│       │   │   │   ├── GovernorTimelockCompoundMock.sol
│       │   │   │   ├── GovernorTimelockControlMock.sol
│       │   │   │   ├── GovernorVoteMock.sol
│       │   │   │   └── GovernorWithParamsMock.sol
│       │   │   ├── proxy
│       │   │   │   ├── BadBeacon.sol
│       │   │   │   ├── ClashingImplementation.sol
│       │   │   │   ├── UUPSLegacy.sol
│       │   │   │   └── UUPSUpgradeableMock.sol
│       │   │   ├── token
│       │   │   │   ├── ERC1155ReceiverMock.sol
│       │   │   │   ├── ERC20DecimalsMock.sol
│       │   │   │   ├── ERC20ExcessDecimalsMock.sol
│       │   │   │   ├── ERC20FlashMintMock.sol
│       │   │   │   ├── ERC20ForceApproveMock.sol
│       │   │   │   ├── ERC20MulticallMock.sol
│       │   │   │   ├── ERC20NoReturnMock.sol
│       │   │   │   ├── ERC20PermitNoRevertMock.sol
│       │   │   │   ├── ERC20ReturnFalseMock.sol
│       │   │   │   ├── ERC20VotesLegacyMock.sol
│       │   │   │   ├── ERC4626OffsetMock.sol
│       │   │   │   ├── ERC4646FeesMock.sol
│       │   │   │   ├── ERC721ConsecutiveEnumerableMock.sol
│       │   │   │   ├── ERC721ConsecutiveMock.sol
│       │   │   │   ├── ERC721ReceiverMock.sol
│       │   │   │   ├── ERC721URIStorageMock.sol
│       │   │   │   ├── ERC777Mock.sol
│       │   │   │   ├── ERC777SenderRecipientMock.sol
│       │   │   │   └── VotesTimestamp.sol
│       │   │   └── wizard
│       │   │       ├── MyGovernor1.sol
│       │   │       ├── MyGovernor2.sol
│       │   │       └── MyGovernor3.sol
│       │   ├── package.json
│       │   ├── proxy
│       │   │   ├── Clones.sol
│       │   │   ├── ERC1967
│       │   │   │   ├── ERC1967Proxy.sol
│       │   │   │   └── ERC1967Upgrade.sol
│       │   │   ├── Proxy.sol
│       │   │   ├── README.adoc
│       │   │   ├── beacon
│       │   │   │   ├── BeaconProxy.sol
│       │   │   │   ├── IBeacon.sol
│       │   │   │   └── UpgradeableBeacon.sol
│       │   │   ├── transparent
│       │   │   │   ├── ProxyAdmin.sol
│       │   │   │   └── TransparentUpgradeableProxy.sol
│       │   │   └── utils
│       │   │       ├── Initializable.sol
│       │   │       └── UUPSUpgradeable.sol
│       │   ├── security
│       │   │   ├── Pausable.sol
│       │   │   ├── PullPayment.sol
│       │   │   ├── README.adoc
│       │   │   └── ReentrancyGuard.sol
│       │   ├── token
│       │   │   ├── ERC1155
│       │   │   │   ├── ERC1155.sol
│       │   │   │   ├── IERC1155.sol
│       │   │   │   ├── IERC1155Receiver.sol
│       │   │   │   ├── README.adoc
│       │   │   │   ├── extensions
│       │   │   │   │   ├── ERC1155Burnable.sol
│       │   │   │   │   ├── ERC1155Pausable.sol
│       │   │   │   │   ├── ERC1155Supply.sol
│       │   │   │   │   ├── ERC1155URIStorage.sol
│       │   │   │   │   └── IERC1155MetadataURI.sol
│       │   │   │   ├── presets
│       │   │   │   │   ├── ERC1155PresetMinterPauser.sol
│       │   │   │   │   └── README.md
│       │   │   │   └── utils
│       │   │   │       ├── ERC1155Holder.sol
│       │   │   │       └── ERC1155Receiver.sol
│       │   │   ├── ERC20
│       │   │   │   ├── ERC20.sol
│       │   │   │   ├── IERC20.sol
│       │   │   │   ├── README.adoc
│       │   │   │   ├── extensions
│       │   │   │   │   ├── ERC20Burnable.sol
│       │   │   │   │   ├── ERC20Capped.sol
│       │   │   │   │   ├── ERC20FlashMint.sol
│       │   │   │   │   ├── ERC20Pausable.sol
│       │   │   │   │   ├── ERC20Permit.sol
│       │   │   │   │   ├── ERC20Snapshot.sol
│       │   │   │   │   ├── ERC20Votes.sol
│       │   │   │   │   ├── ERC20VotesComp.sol
│       │   │   │   │   ├── ERC20Wrapper.sol
│       │   │   │   │   ├── ERC4626.sol
│       │   │   │   │   ├── IERC20Metadata.sol
│       │   │   │   │   ├── IERC20Permit.sol
│       │   │   │   │   ├── draft-ERC20Permit.sol
│       │   │   │   │   └── draft-IERC20Permit.sol
│       │   │   │   ├── presets
│       │   │   │   │   ├── ERC20PresetFixedSupply.sol
│       │   │   │   │   ├── ERC20PresetMinterPauser.sol
│       │   │   │   │   └── README.md
│       │   │   │   └── utils
│       │   │   │       ├── SafeERC20.sol
│       │   │   │       └── TokenTimelock.sol
│       │   │   ├── ERC721
│       │   │   │   ├── ERC721.sol
│       │   │   │   ├── IERC721.sol
│       │   │   │   ├── IERC721Receiver.sol
│       │   │   │   ├── README.adoc
│       │   │   │   ├── extensions
│       │   │   │   │   ├── ERC721Burnable.sol
│       │   │   │   │   ├── ERC721Consecutive.sol
│       │   │   │   │   ├── ERC721Enumerable.sol
│       │   │   │   │   ├── ERC721Pausable.sol
│       │   │   │   │   ├── ERC721Royalty.sol
│       │   │   │   │   ├── ERC721URIStorage.sol
│       │   │   │   │   ├── ERC721Votes.sol
│       │   │   │   │   ├── ERC721Wrapper.sol
│       │   │   │   │   ├── IERC721Enumerable.sol
│       │   │   │   │   ├── IERC721Metadata.sol
│       │   │   │   │   └── draft-ERC721Votes.sol
│       │   │   │   ├── presets
│       │   │   │   │   ├── ERC721PresetMinterPauserAutoId.sol
│       │   │   │   │   └── README.md
│       │   │   │   └── utils
│       │   │   │       └── ERC721Holder.sol
│       │   │   ├── ERC777
│       │   │   │   ├── ERC777.sol
│       │   │   │   ├── IERC777.sol
│       │   │   │   ├── IERC777Recipient.sol
│       │   │   │   ├── IERC777Sender.sol
│       │   │   │   ├── README.adoc
│       │   │   │   └── presets
│       │   │   │       └── ERC777PresetFixedSupply.sol
│       │   │   └── common
│       │   │       ├── ERC2981.sol
│       │   │       └── README.adoc
│       │   ├── utils
│       │   │   ├── Address.sol
│       │   │   ├── Arrays.sol
│       │   │   ├── Base64.sol
│       │   │   ├── Checkpoints.sol
│       │   │   ├── Context.sol
│       │   │   ├── Counters.sol
│       │   │   ├── Create2.sol
│       │   │   ├── Multicall.sol
│       │   │   ├── README.adoc
│       │   │   ├── ShortStrings.sol
│       │   │   ├── StorageSlot.sol
│       │   │   ├── Strings.sol
│       │   │   ├── Timers.sol
│       │   │   ├── cryptography
│       │   │   │   ├── ECDSA.sol
│       │   │   │   ├── EIP712.sol
│       │   │   │   ├── MerkleProof.sol
│       │   │   │   ├── SignatureChecker.sol
│       │   │   │   └── draft-EIP712.sol
│       │   │   ├── escrow
│       │   │   │   ├── ConditionalEscrow.sol
│       │   │   │   ├── Escrow.sol
│       │   │   │   └── RefundEscrow.sol
│       │   │   ├── introspection
│       │   │   │   ├── ERC165.sol
│       │   │   │   ├── ERC165Checker.sol
│       │   │   │   ├── ERC165Storage.sol
│       │   │   │   ├── ERC1820Implementer.sol
│       │   │   │   ├── IERC165.sol
│       │   │   │   ├── IERC1820Implementer.sol
│       │   │   │   └── IERC1820Registry.sol
│       │   │   ├── math
│       │   │   │   ├── Math.sol
│       │   │   │   ├── SafeCast.sol
│       │   │   │   ├── SafeMath.sol
│       │   │   │   ├── SignedMath.sol
│       │   │   │   └── SignedSafeMath.sol
│       │   │   └── structs
│       │   │       ├── BitMaps.sol
│       │   │       ├── DoubleEndedQueue.sol
│       │   │       ├── EnumerableMap.sol
│       │   │       └── EnumerableSet.sol
│       │   └── vendor
│       │       ├── amb
│       │       │   └── IAMB.sol
│       │       ├── arbitrum
│       │       │   ├── IArbSys.sol
│       │       │   ├── IBridge.sol
│       │       │   ├── IDelayedMessageProvider.sol
│       │       │   ├── IInbox.sol
│       │       │   └── IOutbox.sol
│       │       ├── compound
│       │       │   ├── ICompoundTimelock.sol
│       │       │   └── LICENSE
│       │       ├── optimism
│       │       │   ├── ICrossDomainMessenger.sol
│       │       │   └── LICENSE
│       │       └── polygon
│       │           └── IFxMessageProcessor.sol
│       ├── docs
│       │   ├── README.md
│       │   ├── antora.yml
│       │   ├── config.js
│       │   ├── modules
│       │   │   └── ROOT
│       │   │       ├── images
│       │   │       │   ├── erc4626-attack-3a.png
│       │   │       │   ├── erc4626-attack-3b.png
│       │   │       │   ├── erc4626-attack-6.png
│       │   │       │   ├── erc4626-attack.png
│       │   │       │   ├── erc4626-deposit.png
│       │   │       │   ├── erc4626-mint.png
│       │   │       │   ├── erc4626-rate-linear.png
│       │   │       │   ├── erc4626-rate-loglog.png
│       │   │       │   ├── erc4626-rate-loglogext.png
│       │   │       │   ├── tally-exec.png
│       │   │       │   └── tally-vote.png
│       │   │       ├── nav.adoc
│       │   │       └── pages
│       │   │           ├── access-control.adoc
│       │   │           ├── crosschain.adoc
│       │   │           ├── crowdsales.adoc
│       │   │           ├── drafts.adoc
│       │   │           ├── erc1155.adoc
│       │   │           ├── erc20-supply.adoc
│       │   │           ├── erc20.adoc
│       │   │           ├── erc4626.adoc
│       │   │           ├── erc721.adoc
│       │   │           ├── erc777.adoc
│       │   │           ├── extending-contracts.adoc
│       │   │           ├── governance.adoc
│       │   │           ├── index.adoc
│       │   │           ├── releases-stability.adoc
│       │   │           ├── tokens.adoc
│       │   │           ├── upgradeable.adoc
│       │   │           ├── utilities.adoc
│       │   │           └── wizard.adoc
│       │   └── templates
│       │       ├── contract.hbs
│       │       ├── helpers.js
│       │       ├── page.hbs
│       │       └── properties.js
│       ├── foundry.toml
│       ├── hardhat
│       │   ├── env-artifacts.js
│       │   ├── env-contract.js
│       │   ├── ignore-unreachable-warnings.js
│       │   ├── skip-foundry-tests.js
│       │   └── task-test-get-files.js
│       ├── hardhat.config.js
│       ├── lib
│       │   ├── erc4626-tests
│       │   │   ├── .git
│       │   │   ├── ERC4626.prop.sol
│       │   │   ├── ERC4626.test.sol
│       │   │   ├── LICENSE
│       │   │   └── README.md
│       │   └── forge-std
│       │       ├── .git
│       │       ├── .github
│       │       │   └── workflows
│       │       │       └── ci.yml
│       │       ├── .gitignore
│       │       ├── .gitmodules
│       │       ├── LICENSE-APACHE
│       │       ├── LICENSE-MIT
│       │       ├── README.md
│       │       ├── foundry.toml
│       │       ├── lib
│       │       │   └── ds-test
│       │       │       ├── .git
│       │       │       ├── .github
│       │       │       │   └── workflows
│       │       │       │       └── build.yml
│       │       │       ├── .gitignore
│       │       │       ├── LICENSE
│       │       │       ├── Makefile
│       │       │       ├── default.nix
│       │       │       ├── demo
│       │       │       │   └── demo.sol
│       │       │       ├── package.json
│       │       │       └── src
│       │       │           ├── test.sol
│       │       │           └── test.t.sol
│       │       ├── package.json
│       │       ├── src
│       │       │   ├── Base.sol
│       │       │   ├── Script.sol
│       │       │   ├── StdAssertions.sol
│       │       │   ├── StdChains.sol
│       │       │   ├── StdCheats.sol
│       │       │   ├── StdError.sol
│       │       │   ├── StdInvariant.sol
│       │       │   ├── StdJson.sol
│       │       │   ├── StdMath.sol
│       │       │   ├── StdStorage.sol
│       │       │   ├── StdStyle.sol
│       │       │   ├── StdUtils.sol
│       │       │   ├── Test.sol
│       │       │   ├── Vm.sol
│       │       │   ├── console.sol
│       │       │   ├── console2.sol
│       │       │   └── interfaces
│       │       │       ├── IERC1155.sol
│       │       │       ├── IERC165.sol
│       │       │       ├── IERC20.sol
│       │       │       ├── IERC4626.sol
│       │       │       ├── IERC721.sol
│       │       │       └── IMulticall3.sol
│       │       └── test
│       │           ├── StdAssertions.t.sol
│       │           ├── StdChains.t.sol
│       │           ├── StdCheats.t.sol
│       │           ├── StdError.t.sol
│       │           ├── StdMath.t.sol
│       │           ├── StdStorage.t.sol
│       │           ├── StdStyle.t.sol
│       │           ├── StdUtils.t.sol
│       │           ├── compilation
│       │           │   ├── CompilationScript.sol
│       │           │   ├── CompilationScriptBase.sol
│       │           │   ├── CompilationTest.sol
│       │           │   └── CompilationTestBase.sol
│       │           └── fixtures
│       │               └── broadcast.log.json
│       ├── logo.svg
│       ├── netlify.toml
│       ├── package-lock.json
│       ├── package.json
│       ├── remappings.txt
│       ├── renovate.json
│       ├── requirements.txt
│       ├── scripts
│       │   ├── checks
│       │   │   ├── compare-layout.js
│       │   │   ├── compareGasReports.js
│       │   │   ├── extract-layout.js
│       │   │   ├── generation.sh
│       │   │   └── inheritance-ordering.js
│       │   ├── gen-nav.js
│       │   ├── generate
│       │   │   ├── format-lines.js
│       │   │   ├── run.js
│       │   │   └── templates
│       │   │       ├── Checkpoints.js
│       │   │       ├── Checkpoints.opts.js
│       │   │       ├── Checkpoints.t.js
│       │   │       ├── EnumerableMap.js
│       │   │       ├── EnumerableSet.js
│       │   │       ├── SafeCast.js
│       │   │       ├── StorageSlot.js
│       │   │       └── conversion.js
│       │   ├── git-user-config.sh
│       │   ├── helpers.js
│       │   ├── migrate-imports.js
│       │   ├── prepack.sh
│       │   ├── prepare-contracts-package.sh
│       │   ├── prepare-docs.sh
│       │   ├── prepare.sh
│       │   ├── release
│       │   │   ├── format-changelog.js
│       │   │   ├── synchronize-versions.js
│       │   │   ├── update-comment.js
│       │   │   ├── version.sh
│       │   │   └── workflow
│       │   │       ├── exit-prerelease.sh
│       │   │       ├── github-release.js
│       │   │       ├── integrity-check.sh
│       │   │       ├── pack.sh
│       │   │       ├── publish.sh
│       │   │       ├── rerun.js
│       │   │       ├── set-changesets-pr-title.js
│       │   │       ├── start.sh
│       │   │       └── state.js
│       │   ├── remove-ignored-artifacts.js
│       │   ├── update-docs-branch.js
│       │   └── upgradeable
│       │       ├── README.md
│       │       ├── patch-apply.sh
│       │       ├── patch-save.sh
│       │       ├── transpile-onto.sh
│       │       ├── transpile.sh
│       │       └── upgradeable.patch
│       ├── slither.config.json
│       └── test
│           ├── TESTING.md
│           ├── access
│           │   ├── AccessControl.behavior.js
│           │   ├── AccessControl.test.js
│           │   ├── AccessControlCrossChain.test.js
│           │   ├── AccessControlDefaultAdminRules.test.js
│           │   ├── AccessControlEnumerable.test.js
│           │   ├── Ownable.test.js
│           │   └── Ownable2Step.test.js
│           ├── crosschain
│           │   └── CrossChainEnabled.test.js
│           ├── finance
│           │   ├── PaymentSplitter.test.js
│           │   ├── VestingWallet.behavior.js
│           │   └── VestingWallet.test.js
│           ├── governance
│           │   ├── Governor.t.sol
│           │   ├── Governor.test.js
│           │   ├── TimelockController.test.js
│           │   ├── compatibility
│           │   │   └── GovernorCompatibilityBravo.test.js
│           │   ├── extensions
│           │   │   ├── GovernorComp.test.js
│           │   │   ├── GovernorERC721.test.js
│           │   │   ├── GovernorPreventLateQuorum.test.js
│           │   │   ├── GovernorTimelockCompound.test.js
│           │   │   ├── GovernorTimelockControl.test.js
│           │   │   ├── GovernorVotesQuorumFraction.test.js
│           │   │   └── GovernorWithParams.test.js
│           │   └── utils
│           │       ├── EIP6372.behavior.js
│           │       ├── Votes.behavior.js
│           │       └── Votes.test.js
│           ├── helpers
│           │   ├── chainid.js
│           │   ├── create2.js
│           │   ├── crosschain.js
│           │   ├── customError.js
│           │   ├── eip712.js
│           │   ├── enums.js
│           │   ├── erc1967.js
│           │   ├── governance.js
│           │   ├── map-values.js
│           │   ├── sign.js
│           │   ├── time.js
│           │   └── txpool.js
│           ├── metatx
│           │   ├── ERC2771Context.test.js
│           │   └── MinimalForwarder.test.js
│           ├── migrate-imports.test.js
│           ├── proxy
│           │   ├── Clones.behaviour.js
│           │   ├── Clones.test.js
│           │   ├── ERC1967
│           │   │   └── ERC1967Proxy.test.js
│           │   ├── Proxy.behaviour.js
│           │   ├── beacon
│           │   │   ├── BeaconProxy.test.js
│           │   │   └── UpgradeableBeacon.test.js
│           │   ├── transparent
│           │   │   ├── ProxyAdmin.test.js
│           │   │   ├── TransparentUpgradeableProxy.behaviour.js
│           │   │   └── TransparentUpgradeableProxy.test.js
│           │   └── utils
│           │       ├── Initializable.test.js
│           │       └── UUPSUpgradeable.test.js
│           ├── security
│           │   ├── Pausable.test.js
│           │   ├── PullPayment.test.js
│           │   └── ReentrancyGuard.test.js
│           ├── token
│           │   ├── ERC1155
│           │   │   ├── ERC1155.behavior.js
│           │   │   ├── ERC1155.test.js
│           │   │   ├── extensions
│           │   │   │   ├── ERC1155Burnable.test.js
│           │   │   │   ├── ERC1155Pausable.test.js
│           │   │   │   ├── ERC1155Supply.test.js
│           │   │   │   └── ERC1155URIStorage.test.js
│           │   │   ├── presets
│           │   │   │   └── ERC1155PresetMinterPauser.test.js
│           │   │   └── utils
│           │   │       └── ERC1155Holder.test.js
│           │   ├── ERC20
│           │   │   ├── ERC20.behavior.js
│           │   │   ├── ERC20.test.js
│           │   │   ├── extensions
│           │   │   │   ├── ERC20Burnable.behavior.js
│           │   │   │   ├── ERC20Burnable.test.js
│           │   │   │   ├── ERC20Capped.behavior.js
│           │   │   │   ├── ERC20Capped.test.js
│           │   │   │   ├── ERC20FlashMint.test.js
│           │   │   │   ├── ERC20Pausable.test.js
│           │   │   │   ├── ERC20Snapshot.test.js
│           │   │   │   ├── ERC20Votes.test.js
│           │   │   │   ├── ERC20VotesComp.test.js
│           │   │   │   ├── ERC20Wrapper.test.js
│           │   │   │   ├── ERC4626.t.sol
│           │   │   │   ├── ERC4626.test.js
│           │   │   │   └── draft-ERC20Permit.test.js
│           │   │   ├── presets
│           │   │   │   ├── ERC20PresetFixedSupply.test.js
│           │   │   │   └── ERC20PresetMinterPauser.test.js
│           │   │   └── utils
│           │   │       ├── SafeERC20.test.js
│           │   │       └── TokenTimelock.test.js
│           │   ├── ERC721
│           │   │   ├── ERC721.behavior.js
│           │   │   ├── ERC721.test.js
│           │   │   ├── ERC721Enumerable.test.js
│           │   │   ├── extensions
│           │   │   │   ├── ERC721Burnable.test.js
│           │   │   │   ├── ERC721Consecutive.t.sol
│           │   │   │   ├── ERC721Consecutive.test.js
│           │   │   │   ├── ERC721Pausable.test.js
│           │   │   │   ├── ERC721Royalty.test.js
│           │   │   │   ├── ERC721URIStorage.test.js
│           │   │   │   ├── ERC721Votes.test.js
│           │   │   │   └── ERC721Wrapper.test.js
│           │   │   ├── presets
│           │   │   │   └── ERC721PresetMinterPauserAutoId.test.js
│           │   │   └── utils
│           │   │       └── ERC721Holder.test.js
│           │   ├── ERC777
│           │   │   ├── ERC777.behavior.js
│           │   │   ├── ERC777.test.js
│           │   │   └── presets
│           │   │       └── ERC777PresetFixedSupply.test.js
│           │   └── common
│           │       └── ERC2981.behavior.js
│           └── utils
│               ├── Address.test.js
│               ├── Arrays.test.js
│               ├── Base64.test.js
│               ├── Checkpoints.t.sol
│               ├── Checkpoints.test.js
│               ├── Context.behavior.js
│               ├── Context.test.js
│               ├── Counters.test.js
│               ├── Create2.test.js
│               ├── Multicall.test.js
│               ├── ShortStrings.t.sol
│               ├── ShortStrings.test.js
│               ├── StorageSlot.test.js
│               ├── Strings.test.js
│               ├── TimersBlockNumberImpl.test.js
│               ├── TimersTimestamp.test.js
│               ├── cryptography
│               │   ├── ECDSA.test.js
│               │   ├── EIP712.test.js
│               │   ├── MerkleProof.test.js
│               │   └── SignatureChecker.test.js
│               ├── escrow
│               │   ├── ConditionalEscrow.test.js
│               │   ├── Escrow.behavior.js
│               │   ├── Escrow.test.js
│               │   └── RefundEscrow.test.js
│               ├── introspection
│               │   ├── ERC165.test.js
│               │   ├── ERC165Checker.test.js
│               │   ├── ERC165Storage.test.js
│               │   ├── ERC1820Implementer.test.js
│               │   └── SupportsInterface.behavior.js
│               ├── math
│               │   ├── Math.t.sol
│               │   ├── Math.test.js
│               │   ├── SafeCast.test.js
│               │   ├── SafeMath.test.js
│               │   ├── SignedMath.test.js
│               │   └── SignedSafeMath.test.js
│               └── structs
│                   ├── BitMap.test.js
│                   ├── DoubleEndedQueue.test.js
│                   ├── EnumerableMap.behavior.js
│                   ├── EnumerableMap.test.js
│                   ├── EnumerableSet.behavior.js
│                   └── EnumerableSet.test.js
├── out
│   ├── Base.sol
│   │   ├── CommonBase.json
│   │   ├── ScriptBase.json
│   │   └── TestBase.json
│   ├── Context.sol
│   │   └── Context.json
│   ├── ECDSA.sol
│   │   └── ECDSA.json
│   ├── ERC20.sol
│   │   └── ERC20.json
│   ├── IERC20.sol
│   │   └── IERC20.json
│   ├── IERC20Metadata.sol
│   │   └── IERC20Metadata.json
│   ├── IMulticall3.sol
│   │   └── IMulticall3.json
│   ├── LPToken.sol
│   │   └── LPToken.json
│   ├── LiquidityPool.sol
│   │   └── LiquidityPool.json
│   ├── LiquidityPoolTest.sol
│   │   └── LiquidityPoolTest.json
│   ├── Math.sol
│   │   └── Math.json
│   ├── PaymentChannel.sol
│   │   └── PaymentChannel.json
│   ├── PaymentChannelTest.sol
│   │   └── PaymentChannelTest.json
│   ├── ReentrancyGuard.sol
│   │   └── ReentrancyGuard.json
│   ├── SignedMath.sol
│   │   └── SignedMath.json
│   ├── StdAssertions.sol
│   │   └── StdAssertions.json
│   ├── StdChains.sol
│   │   └── StdChains.json
│   ├── StdCheats.sol
│   │   ├── StdCheats.json
│   │   └── StdCheatsSafe.json
│   ├── StdError.sol
│   │   └── stdError.json
│   ├── StdInvariant.sol
│   │   └── StdInvariant.json
│   ├── StdJson.sol
│   │   └── stdJson.json
│   ├── StdMath.sol
│   │   └── stdMath.json
│   ├── StdStorage.sol
│   │   ├── stdStorage.json
│   │   └── stdStorageSafe.json
│   ├── StdStyle.sol
│   │   └── StdStyle.json
│   ├── StdToml.sol
│   │   └── stdToml.json
│   ├── StdUtils.sol
│   │   └── StdUtils.json
│   ├── Strings.sol
│   │   └── Strings.json
│   ├── Test.sol
│   │   └── Test.json
│   ├── TestTokens.sol
│   │   ├── TestTokenA.json
│   │   └── TestTokenB.json
│   ├── Vm.sol
│   │   ├── Vm.json
│   │   └── VmSafe.json
│   ├── build-info
│   │   └── 0115e92a1e38b7bb568bcdedec77ceef.json
│   ├── console.sol
│   │   └── console.json
│   └── safeconsole.sol
│       └── safeconsole.json
├── remappings.txt
├── script
│   └── Deploy.s.sol
├── src
│   ├── LPToken.sol
│   ├── LiquidityPool.sol
│   ├── PaymentChannel.sol
│   └── TestTokens.sol
├── test
│   ├── LiquidityPoolTest.sol
│   └── PaymentChannelTest.sol
└── tree.txt

360 directories, 1028 files

--------------------------------------------------------

## diff.txt Contents
diff --git a/src/LPToken.sol b/src/LPToken.sol
index d8843e6..a145cad 100644
--- a/src/LPToken.sol
+++ b/src/LPToken.sol
@@ -2,21 +2,29 @@
 pragma solidity ^0.8.20;
 
 import "openzeppelin-contracts/token/ERC20/ERC20.sol";
+import "forge-std/console2.sol";
 
 contract LPToken is ERC20 {
     address public immutable pool;
 
-    constructor() ERC20("LP Token", "LP") {
+    constructor() ERC20("Liquidity Pool Token", "LPT") {
         pool = msg.sender;
+        console2.log("LP Token constructor - Pool address set to:", msg.sender);
     }
 
-    function mint(address to, uint256 amount) external {
+    function mint(address account, uint256 amount) external {
+        console2.log("LP Token mint called by:", msg.sender);
+        console2.log("Minting to address:", account);
+        console2.log("Amount:", amount);
+        
         require(msg.sender == pool, "Only pool can mint");
-        _mint(to, amount);
+        require(account != address(0), "Cannot mint to zero address");
+        _mint(account, amount);
     }
 
-    function burn(address from, uint256 amount) external {
+    function burn(address account, uint256 amount) external {
         require(msg.sender == pool, "Only pool can burn");
-        _burn(from, amount);
+        require(account != address(0), "Cannot burn from zero address");
+        _burn(account, amount);
     }
 }
\ No newline at end of file
diff --git a/src/LiquidityPool.sol b/src/LiquidityPool.sol
index 6af8ae6..aa36676 100644
--- a/src/LiquidityPool.sol
+++ b/src/LiquidityPool.sol
@@ -15,10 +15,14 @@ contract LiquidityPool is ReentrancyGuard {
     
     uint256 public reserveA;
     uint256 public reserveB;
+    uint256 public lastK;  // Store k (reserveA * reserveB) for manipulation checks
     
     uint256 public constant MINIMUM_LIQUIDITY = 1000;
     uint256 private constant FEE_DENOMINATOR = 1000;
     uint256 private constant FEE_NUMERATOR = 3; // 0.3% fee
+    uint256 private constant MINIMUM_TRADE_DELAY = 2; // blocks
+    
+    mapping(address => uint256) public lastTradeBlock;  // Track last trade block for each user
 
     // Events
     event LiquidityAdded(address indexed provider, uint256 amountA, uint256 amountB, uint256 liquidity);
@@ -31,29 +35,56 @@ contract LiquidityPool is ReentrancyGuard {
         tokenA = IERC20(_tokenA);
         tokenB = IERC20(_tokenB);
         lpToken = new LPToken();
+        console2.log("LP Token deployed at:", address(lpToken));
     }
 
     function getReserves() public view returns (uint256, uint256) {
         return (reserveA, reserveB);
     }
 
+    function _updateAndCheckK() private {
+        uint256 newK = reserveA * reserveB;
+        if (lastK != 0) {
+            require(newK >= lastK, "K value decreased");
+        }
+        lastK = newK;
+    }
+
+    function _checkTradeDelay() private {
+        require(
+            block.number >= lastTradeBlock[msg.sender] + MINIMUM_TRADE_DELAY,
+            "Must wait before trading again"
+        );
+        lastTradeBlock[msg.sender] = block.number;
+    }
+
     function addLiquidity(uint256 amountADesired, uint256 amountBDesired) 
         external 
         nonReentrant 
         returns (uint256 amountA, uint256 amountB, uint256 liquidity) 
     {
-        // Transfer tokens to this contract
+        require(amountADesired >= MINIMUM_LIQUIDITY, "Insufficient token A amount");
+        require(amountBDesired >= MINIMUM_LIQUIDITY, "Insufficient token B amount");
+        
         tokenA.transferFrom(msg.sender, address(this), amountADesired);
         tokenB.transferFrom(msg.sender, address(this), amountBDesired);
 
-        // Calculate amounts
         uint256 _reserveA = reserveA;
         uint256 _reserveB = reserveB;
 
         if (_reserveA == 0 && _reserveB == 0) {
-            (amountA, amountB) = (amountADesired, amountBDesired);
+            uint256 minDesired = Math.min(amountADesired, amountBDesired);
+            (amountA, amountB) = (minDesired, amountBDesired);
             liquidity = Math.sqrt(amountA * amountB) - MINIMUM_LIQUIDITY;
-            lpToken.mint(address(0), MINIMUM_LIQUIDITY); // Lock the minimum liquidity
+            console2.log("Initial liquidity calculated:", liquidity);
+            console2.log("Sender address:", msg.sender);
+            
+            // For the first deposit, we need to handle minimum liquidity
+            if (liquidity <= 0) revert("Insufficient initial liquidity");
+            
+            // Mint minimum liquidity first
+            console2.log("Minting minimum liquidity to:", msg.sender);
+            lpToken.mint(msg.sender, MINIMUM_LIQUIDITY);
         } else {
             uint256 amountBOptimal = quote(amountADesired, _reserveA, _reserveB);
             if (amountBOptimal <= amountBDesired) {
@@ -70,11 +101,10 @@ contract LiquidityPool is ReentrancyGuard {
 
         require(liquidity > 0, "Insufficient liquidity minted");
 
-        // Update reserves
         reserveA += amountA;
         reserveB += amountB;
+        _updateAndCheckK();
 
-        // Refund excess tokens
         if (amountA < amountADesired) {
             tokenA.transfer(msg.sender, amountADesired - amountA);
         }
@@ -91,20 +121,31 @@ contract LiquidityPool is ReentrancyGuard {
         nonReentrant 
         returns (uint256 amountA, uint256 amountB) 
     {
-        // Transfer LP tokens from user
-        lpToken.burn(msg.sender, liquidity);
-
-        // Calculate token amounts
-        amountA = (liquidity * reserveA) / lpToken.totalSupply();
-        amountB = (liquidity * reserveB) / lpToken.totalSupply();
-
+        require(liquidity > 0, "Invalid liquidity amount");
+        uint256 totalSupply = lpToken.totalSupply();
+        require(totalSupply > 0, "No supply");
+        
+        // Calculate proportional token amounts before burning tokens
+        amountA = (liquidity * reserveA) / totalSupply;
+        amountB = (liquidity * reserveB) / totalSupply;
         require(amountA > 0 && amountB > 0, "Insufficient liquidity burned");
 
         // Update reserves
-        reserveA -= amountA;
-        reserveB -= amountB;
-
-        // Transfer tokens to user
+        uint256 balanceA = reserveA;
+        uint256 balanceB = reserveB;
+        reserveA = balanceA - amountA;
+        reserveB = balanceB - amountB;
+
+        // Check K value before burning tokens
+        uint256 oldK = balanceA * balanceB;
+        uint256 newK = reserveA * reserveB;
+        // require(newK >= oldK * (totalSupply - liquidity) / totalSupply, "K value decreased");
+        require(
+            newK >= (oldK * (totalSupply - liquidity)**2) / (totalSupply**2),
+            "K value decreased" 
+        );
+        // Burn LP tokens and transfer tokens
+        lpToken.burn(msg.sender, liquidity);
         tokenA.transfer(msg.sender, amountA);
         tokenB.transfer(msg.sender, amountB);
 
@@ -117,28 +158,42 @@ contract LiquidityPool is ReentrancyGuard {
         returns (uint256 amountOut) 
     {
         require(amountIn > 0, "Insufficient input amount");
+        require(amountIn >= MINIMUM_LIQUIDITY, "Below minimum swap amount");
+        
+        _checkTradeDelay();
+        
         (uint256 _reserveA, uint256 _reserveB) = getReserves();
         require(_reserveA > 0 && _reserveB > 0, "Insufficient liquidity");
 
-        // Calculate amount out
+        uint256 balanceBefore = isAtoB ? 
+            tokenA.balanceOf(address(this)) : 
+            tokenB.balanceOf(address(this));
+
         if (isAtoB) {
             amountOut = getAmountOut(amountIn, _reserveA, _reserveB);
-            // Transfer tokens
+            require(amountOut <= _reserveB / 3, "Output amount too large");
+            
             tokenA.transferFrom(msg.sender, address(this), amountIn);
             tokenB.transfer(msg.sender, amountOut);
-            // Update reserves
             reserveA += amountIn;
             reserveB -= amountOut;
         } else {
             amountOut = getAmountOut(amountIn, _reserveB, _reserveA);
-            // Transfer tokens
+            require(amountOut <= _reserveA / 3, "Output amount too large");
+            
             tokenB.transferFrom(msg.sender, address(this), amountIn);
             tokenA.transfer(msg.sender, amountOut);
-            // Update reserves
             reserveB += amountIn;
             reserveA -= amountOut;
         }
 
+        // Verify actual balance changes match expected changes
+        uint256 balanceAfter = isAtoB ? 
+            tokenA.balanceOf(address(this)) : 
+            tokenB.balanceOf(address(this));
+        require(balanceAfter >= balanceBefore + amountIn, "Balance manipulation detected");
+        
+        _updateAndCheckK();
         emit Swap(msg.sender, amountIn, amountOut, isAtoB);
     }
 
diff --git a/src/TestTokens.sol b/src/TestTokens.sol
index 4219aa1..3792f48 100644
--- a/src/TestTokens.sol
+++ b/src/TestTokens.sol
@@ -4,21 +4,19 @@ pragma solidity ^0.8.20;
 import "openzeppelin-contracts/token/ERC20/ERC20.sol";
 
 contract TestTokenA is ERC20 {
-    constructor() ERC20("Test Token A", "TTA") {
-        _mint(msg.sender, 1000000 * 10**decimals());
-    }
+    constructor() ERC20("Test Token A", "TTA") {}
 
-    function mint(address to, uint256 amount) external {
-        _mint(to, amount);
+    function mint(address account, uint256 amount) public {
+        require(account != address(0), "TestToken: mint to the zero address");
+        _mint(account, amount);
     }
 }
 
 contract TestTokenB is ERC20 {
-    constructor() ERC20("Test Token B", "TTB") {
-        _mint(msg.sender, 1000000 * 10**decimals());
-    }
+    constructor() ERC20("Test Token B", "TTB") {}
 
-    function mint(address to, uint256 amount) external {
-        _mint(to, amount);
+    function mint(address account, uint256 amount) public {
+        require(account != address(0), "TestToken: mint to the zero address");
+        _mint(account, amount);
     }
 }
\ No newline at end of file

--------------------------------------------------------

## Solidity Files
### File: src/TestTokens.sol
```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "openzeppelin-contracts/token/ERC20/ERC20.sol";

contract TestTokenA is ERC20 {
    constructor() ERC20("Test Token A", "TTA") {}

    function mint(address account, uint256 amount) public {
        require(account != address(0), "TestToken: mint to the zero address");
        _mint(account, amount);
    }
}

contract TestTokenB is ERC20 {
    constructor() ERC20("Test Token B", "TTB") {}

    function mint(address account, uint256 amount) public {
        require(account != address(0), "TestToken: mint to the zero address");
        _mint(account, amount);
    }
}```

### File: src/LPToken.sol
```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "openzeppelin-contracts/token/ERC20/ERC20.sol";
import "forge-std/console2.sol";

contract LPToken is ERC20 {
    address public immutable pool;

    constructor() ERC20("Liquidity Pool Token", "LPT") {
        pool = msg.sender;
        console2.log("LP Token constructor - Pool address set to:", msg.sender);
    }

    function mint(address account, uint256 amount) external {
        console2.log("LP Token mint called by:", msg.sender);
        console2.log("Minting to address:", account);
        console2.log("Amount:", amount);
        
        require(msg.sender == pool, "Only pool can mint");
        require(account != address(0), "Cannot mint to zero address");
        _mint(account, amount);
    }

    function burn(address account, uint256 amount) external {
        require(msg.sender == pool, "Only pool can burn");
        require(account != address(0), "Cannot burn from zero address");
        _burn(account, amount);
    }
}```

### File: src/PaymentChannel.sol
```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "openzeppelin-contracts/security/ReentrancyGuard.sol";
import "openzeppelin-contracts/utils/cryptography/ECDSA.sol";

contract PaymentChannel is ReentrancyGuard {
    using ECDSA for bytes32;

    address public payer;
    address public payee;
    uint256 public expiresAt;
    uint256 public depositAmount;
    bool public isClosed;

    constructor(
        address _payee,
        uint256 _duration
    ) payable {
        require(_payee != address(0), "Invalid payee address");
        require(msg.value > 0, "Deposit required");
        require(_duration > 0, "Duration must be greater than 0");

        payer = msg.sender;
        payee = _payee;
        depositAmount = msg.value;
        expiresAt = block.timestamp + _duration;
    }

    function getHash(uint256 amount) public view returns (bytes32) {
        return keccak256(abi.encodePacked(address(this), amount));
    }

    function verify(uint256 amount, bytes memory signature) public view returns (bool) {
        bytes32 messageHash = getHash(amount);
        bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(messageHash);
        return ECDSA.recover(ethSignedMessageHash, signature) == payer;
    }

    function claim(uint256 amount, bytes memory signature) external nonReentrant {
        require(!isClosed, "Channel is closed");
        require(msg.sender == payee, "Only payee can claim");
        require(block.timestamp < expiresAt, "Channel has expired");
        require(amount <= depositAmount, "Amount exceeds deposit");
        require(verify(amount, signature), "Invalid signature");

        isClosed = true;
        
        // Transfer amount to payee
        (bool success, ) = payee.call{value: amount}("");
        require(success, "Transfer failed");

        // Return remaining funds to payer
        if (amount < depositAmount) {
            (success, ) = payer.call{value: depositAmount - amount}("");
            require(success, "Refund failed");
        }
    }

    function refund() external nonReentrant {
        require(!isClosed, "Channel is closed");
        require(msg.sender == payer, "Only payer can refund");
        require(block.timestamp >= expiresAt, "Channel hasn't expired");

        isClosed = true;
        (bool success, ) = payer.call{value: depositAmount}("");
        require(success, "Refund failed");
    }

    function extend(uint256 newDuration) external {
        require(msg.sender == payer, "Only payer can extend");
        require(!isClosed, "Channel is closed");
        require(newDuration > 0, "Duration must be greater than 0");
        require(block.timestamp + newDuration > expiresAt, "New expiration must be later than current");

        expiresAt = block.timestamp + newDuration;
    }
}```

### File: src/LiquidityPool.sol
```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "openzeppelin-contracts/token/ERC20/IERC20.sol";
import "openzeppelin-contracts/security/ReentrancyGuard.sol";
import "openzeppelin-contracts/utils/math/Math.sol";
import "./LPToken.sol";

contract LiquidityPool is ReentrancyGuard {
    using Math for uint256;

    IERC20 public immutable tokenA;
    IERC20 public immutable tokenB;
    LPToken public immutable lpToken;
    
    uint256 public reserveA;
    uint256 public reserveB;
    uint256 public lastK;  // Store k (reserveA * reserveB) for manipulation checks
    
    uint256 public constant MINIMUM_LIQUIDITY = 1000;
    uint256 private constant FEE_DENOMINATOR = 1000;
    uint256 private constant FEE_NUMERATOR = 3; // 0.3% fee
    uint256 private constant MINIMUM_TRADE_DELAY = 2; // blocks
    
    mapping(address => uint256) public lastTradeBlock;  // Track last trade block for each user

    // Events
    event LiquidityAdded(address indexed provider, uint256 amountA, uint256 amountB, uint256 liquidity);
    event LiquidityRemoved(address indexed provider, uint256 amountA, uint256 amountB, uint256 liquidity);
    event Swap(address indexed sender, uint256 amountIn, uint256 amountOut, bool isAtoB);

    constructor(address _tokenA, address _tokenB) {
        require(_tokenA != address(0) && _tokenB != address(0), "Zero address");
        require(_tokenA != _tokenB, "Same token");
        tokenA = IERC20(_tokenA);
        tokenB = IERC20(_tokenB);
        lpToken = new LPToken();
        console2.log("LP Token deployed at:", address(lpToken));
    }

    function getReserves() public view returns (uint256, uint256) {
        return (reserveA, reserveB);
    }

    function _updateAndCheckK() private {
        uint256 newK = reserveA * reserveB;
        if (lastK != 0) {
            require(newK >= lastK, "K value decreased");
        }
        lastK = newK;
    }

    function _checkTradeDelay() private {
        require(
            block.number >= lastTradeBlock[msg.sender] + MINIMUM_TRADE_DELAY,
            "Must wait before trading again"
        );
        lastTradeBlock[msg.sender] = block.number;
    }

    function addLiquidity(uint256 amountADesired, uint256 amountBDesired) 
        external 
        nonReentrant 
        returns (uint256 amountA, uint256 amountB, uint256 liquidity) 
    {
        require(amountADesired >= MINIMUM_LIQUIDITY, "Insufficient token A amount");
        require(amountBDesired >= MINIMUM_LIQUIDITY, "Insufficient token B amount");
        
        tokenA.transferFrom(msg.sender, address(this), amountADesired);
        tokenB.transferFrom(msg.sender, address(this), amountBDesired);

        uint256 _reserveA = reserveA;
        uint256 _reserveB = reserveB;

        if (_reserveA == 0 && _reserveB == 0) {
            uint256 minDesired = Math.min(amountADesired, amountBDesired);
            (amountA, amountB) = (minDesired, amountBDesired);
            liquidity = Math.sqrt(amountA * amountB) - MINIMUM_LIQUIDITY;
            console2.log("Initial liquidity calculated:", liquidity);
            console2.log("Sender address:", msg.sender);
            
            // For the first deposit, we need to handle minimum liquidity
            if (liquidity <= 0) revert("Insufficient initial liquidity");
            
            // Mint minimum liquidity first
            console2.log("Minting minimum liquidity to:", msg.sender);
            lpToken.mint(msg.sender, MINIMUM_LIQUIDITY);
        } else {
            uint256 amountBOptimal = quote(amountADesired, _reserveA, _reserveB);
            if (amountBOptimal <= amountBDesired) {
                (amountA, amountB) = (amountADesired, amountBOptimal);
            } else {
                uint256 amountAOptimal = quote(amountBDesired, _reserveB, _reserveA);
                (amountA, amountB) = (amountAOptimal, amountBDesired);
            }
            liquidity = Math.min(
                (amountA * lpToken.totalSupply()) / _reserveA,
                (amountB * lpToken.totalSupply()) / _reserveB
            );
        }

        require(liquidity > 0, "Insufficient liquidity minted");

        reserveA += amountA;
        reserveB += amountB;
        _updateAndCheckK();

        if (amountA < amountADesired) {
            tokenA.transfer(msg.sender, amountADesired - amountA);
        }
        if (amountB < amountBDesired) {
            tokenB.transfer(msg.sender, amountBDesired - amountB);
        }

        lpToken.mint(msg.sender, liquidity);
        emit LiquidityAdded(msg.sender, amountA, amountB, liquidity);
    }

    function removeLiquidity(uint256 liquidity) 
        external 
        nonReentrant 
        returns (uint256 amountA, uint256 amountB) 
    {
        require(liquidity > 0, "Invalid liquidity amount");
        uint256 totalSupply = lpToken.totalSupply();
        require(totalSupply > 0, "No supply");
        
        // Calculate proportional token amounts before burning tokens
        amountA = (liquidity * reserveA) / totalSupply;
        amountB = (liquidity * reserveB) / totalSupply;
        require(amountA > 0 && amountB > 0, "Insufficient liquidity burned");

        // Update reserves
        uint256 balanceA = reserveA;
        uint256 balanceB = reserveB;
        reserveA = balanceA - amountA;
        reserveB = balanceB - amountB;

        // Check K value before burning tokens
        uint256 oldK = balanceA * balanceB;
        uint256 newK = reserveA * reserveB;
        // require(newK >= oldK * (totalSupply - liquidity) / totalSupply, "K value decreased");
        require(
            newK >= (oldK * (totalSupply - liquidity)**2) / (totalSupply**2),
            "K value decreased" 
        );
        // Burn LP tokens and transfer tokens
        lpToken.burn(msg.sender, liquidity);
        tokenA.transfer(msg.sender, amountA);
        tokenB.transfer(msg.sender, amountB);

        emit LiquidityRemoved(msg.sender, amountA, amountB, liquidity);
    }

    function swap(uint256 amountIn, bool isAtoB) 
        external 
        nonReentrant 
        returns (uint256 amountOut) 
    {
        require(amountIn > 0, "Insufficient input amount");
        require(amountIn >= MINIMUM_LIQUIDITY, "Below minimum swap amount");
        
        _checkTradeDelay();
        
        (uint256 _reserveA, uint256 _reserveB) = getReserves();
        require(_reserveA > 0 && _reserveB > 0, "Insufficient liquidity");

        uint256 balanceBefore = isAtoB ? 
            tokenA.balanceOf(address(this)) : 
            tokenB.balanceOf(address(this));

        if (isAtoB) {
            amountOut = getAmountOut(amountIn, _reserveA, _reserveB);
            require(amountOut <= _reserveB / 3, "Output amount too large");
            
            tokenA.transferFrom(msg.sender, address(this), amountIn);
            tokenB.transfer(msg.sender, amountOut);
            reserveA += amountIn;
            reserveB -= amountOut;
        } else {
            amountOut = getAmountOut(amountIn, _reserveB, _reserveA);
            require(amountOut <= _reserveA / 3, "Output amount too large");
            
            tokenB.transferFrom(msg.sender, address(this), amountIn);
            tokenA.transfer(msg.sender, amountOut);
            reserveB += amountIn;
            reserveA -= amountOut;
        }

        // Verify actual balance changes match expected changes
        uint256 balanceAfter = isAtoB ? 
            tokenA.balanceOf(address(this)) : 
            tokenB.balanceOf(address(this));
        require(balanceAfter >= balanceBefore + amountIn, "Balance manipulation detected");
        
        _updateAndCheckK();
        emit Swap(msg.sender, amountIn, amountOut, isAtoB);
    }

    function quote(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) 
        public 
        pure 
        returns (uint256 amountOut) 
    {
        require(amountIn > 0, "Insufficient amount");
        require(reserveIn > 0 && reserveOut > 0, "Insufficient liquidity");
        amountOut = (amountIn * reserveOut) / reserveIn;
    }

    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) 
        public 
        pure 
        returns (uint256 amountOut) 
    {
        require(amountIn > 0, "Insufficient input amount");
        require(reserveIn > 0 && reserveOut > 0, "Insufficient liquidity");

        uint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);
        uint256 numerator = amountInWithFee * reserveOut;
        uint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;
        amountOut = numerator / denominator;
    }
}```

### File: test/LiquidityPoolTest.sol
```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test, console2} from "forge-std/Test.sol";
import {LiquidityPool} from "../src/LiquidityPool.sol";
import {TestTokenA, TestTokenB} from "../src/TestTokens.sol";
import {LPToken} from "../src/LPToken.sol";

contract LiquidityPoolTest is Test {
    LiquidityPool public pool;
    TestTokenA public tokenA;
    TestTokenB public tokenB;
    
    address public alice;
    address public bob;
    address public carol;
    uint256 public constant INITIAL_MINT_AMOUNT = 1000000 * 10**18;
    uint256 public constant INITIAL_LIQUIDITY = 100 * 10**18;

    function setUp() public {
        // Create test addresses
        alice = makeAddr("alice");
        bob = makeAddr("bob");
        carol = makeAddr("carol");

        // Deploy tokens and pool
        tokenA = new TestTokenA();
        tokenB = new TestTokenB();
        pool = new LiquidityPool(address(tokenA), address(tokenB));

        // Setup Alice
        vm.startPrank(alice);
        tokenA.mint(alice, INITIAL_MINT_AMOUNT);
        tokenB.mint(alice, INITIAL_MINT_AMOUNT);
        tokenA.approve(address(pool), type(uint256).max);
        tokenB.approve(address(pool), type(uint256).max);
        vm.stopPrank();

        // Setup Bob
        vm.startPrank(bob);
        tokenA.mint(bob, INITIAL_MINT_AMOUNT);
        tokenB.mint(bob, INITIAL_MINT_AMOUNT);
        tokenA.approve(address(pool), type(uint256).max);
        tokenB.approve(address(pool), type(uint256).max);
        vm.stopPrank();

        // Setup Carol
        vm.startPrank(carol);
        tokenA.mint(carol, INITIAL_MINT_AMOUNT);
        tokenB.mint(carol, INITIAL_MINT_AMOUNT);
        tokenA.approve(address(pool), type(uint256).max);
        tokenB.approve(address(pool), type(uint256).max);
        vm.stopPrank();
    }

    // Basic Functionality Tests
    function testInitialLiquidity() public {
        vm.prank(alice);
        (uint256 amountA, uint256 amountB, uint256 lpTokens) = pool.addLiquidity(INITIAL_LIQUIDITY, INITIAL_LIQUIDITY);
        
        assertEq(amountA, INITIAL_LIQUIDITY, "Incorrect token A amount");
        assertEq(amountB, INITIAL_LIQUIDITY, "Incorrect token B amount");
        assertGt(lpTokens, 0, "No LP tokens minted");

        (uint256 reserveA, uint256 reserveB) = pool.getReserves();
        assertEq(reserveA, INITIAL_LIQUIDITY, "Incorrect reserve A");
        assertEq(reserveB, INITIAL_LIQUIDITY, "Incorrect reserve B");
    }

    function testMultipleDeposits() public {
        // First deposit by Alice
        vm.prank(alice);
        pool.addLiquidity(INITIAL_LIQUIDITY, INITIAL_LIQUIDITY);

        // Second deposit by Bob
        vm.prank(bob);
        pool.addLiquidity(INITIAL_LIQUIDITY, INITIAL_LIQUIDITY);

        (uint256 reserveA, uint256 reserveB) = pool.getReserves();
        assertEq(reserveA, INITIAL_LIQUIDITY * 2, "Incorrect reserve A after multiple deposits");
        assertEq(reserveB, INITIAL_LIQUIDITY * 2, "Incorrect reserve B after multiple deposits");
    }

    function testSwap() public {
        // Add initial liquidity
        vm.startPrank(alice);
        pool.addLiquidity(INITIAL_LIQUIDITY, INITIAL_LIQUIDITY);
        vm.stopPrank();

        uint256 swapAmount = 10 * 10**18; // 10 tokens
        
        // Record balances before swap
        uint256 bobTokenABefore = tokenA.balanceOf(bob);
        uint256 bobTokenBBefore = tokenB.balanceOf(bob);

        // Wait required blocks and perform swap
        vm.roll(block.number + 3);
        vm.prank(bob);
        uint256 amountOut = pool.swap(swapAmount, true); // true for A to B

        // Verify balances
        assertEq(tokenA.balanceOf(bob), bobTokenABefore - swapAmount, "Incorrect token A balance after swap");
        assertEq(tokenB.balanceOf(bob), bobTokenBBefore + amountOut, "Incorrect token B balance after swap");
    }

    function testRemoveLiquidity() public {
        // Add liquidity
        vm.startPrank(alice);
        (,, uint256 lpTokens) = pool.addLiquidity(INITIAL_LIQUIDITY, INITIAL_LIQUIDITY);
        
        // Wait and remove half liquidity
        vm.roll(block.number + 3);
        uint256 burnAmount = lpTokens / 2;

        // Record balances before removal
        uint256 aliceTokenABefore = tokenA.balanceOf(alice);
        uint256 aliceTokenBBefore = tokenB.balanceOf(alice);

        // Remove liquidity
        (uint256 amountA, uint256 amountB) = pool.removeLiquidity(burnAmount);

        // Verify balances
        assertEq(tokenA.balanceOf(alice), aliceTokenABefore + amountA, "Incorrect token A balance after removal");
        assertEq(tokenB.balanceOf(alice), aliceTokenBBefore + amountB, "Incorrect token B balance after removal");
        vm.stopPrank();
    }

    // Security Tests
    function test_RevertWhen_FlashLoanAttack() public {
        // Add initial liquidity
        vm.startPrank(alice);
        pool.addLiquidity(INITIAL_LIQUIDITY, INITIAL_LIQUIDITY);
        vm.stopPrank();

        vm.startPrank(bob);
        // First swap
        vm.roll(block.number + 3);
        pool.swap(10 * 10**18, true);
        
        // Try immediate second swap
        vm.expectRevert("Must wait before trading again");
        pool.swap(10 * 10**18, false);
        vm.stopPrank();
    }

    function test_RevertWhen_SwapAmountTooLarge() public {
        // Add initial liquidity
        vm.startPrank(alice);
        pool.addLiquidity(INITIAL_LIQUIDITY, INITIAL_LIQUIDITY);
        vm.stopPrank();

        vm.roll(block.number + 3);

        vm.startPrank(bob);
        vm.expectRevert("Output amount too large");
        pool.swap(INITIAL_LIQUIDITY, true); // Try to swap entire pool
        vm.stopPrank();
    }

    function testK_ValueProtection() public {
        // Add initial liquidity
        vm.startPrank(alice);
        pool.addLiquidity(INITIAL_LIQUIDITY, INITIAL_LIQUIDITY);
        vm.stopPrank();

        uint256 initialK = INITIAL_LIQUIDITY * INITIAL_LIQUIDITY;

        // Perform swap
        vm.roll(block.number + 3);
        vm.prank(bob);
        pool.swap(10 * 10**18, true);

        // Verify K hasn't decreased
        (uint256 reserveA, uint256 reserveB) = pool.getReserves();
        uint256 newK = reserveA * reserveB;
        assertGe(newK, initialK, "K value should not decrease");
    }

    // Edge Cases and Additional Tests
    function test_RevertWhen_AddingInsufficientLiquidity() public {
        uint256 tinyAmount = 100;
        vm.prank(alice);
        vm.expectRevert("Insufficient token A amount");
        pool.addLiquidity(tinyAmount, INITIAL_LIQUIDITY);
    }

    function testAsymmetricLiquidity() public {
        vm.startPrank(alice);
        
        // Try to add asymmetric liquidity (2:1 ratio)
        uint256 amountA = INITIAL_LIQUIDITY;
        uint256 amountB = INITIAL_LIQUIDITY * 2;
        
        console2.log("Adding asymmetric liquidity - A:", amountA, "B:", amountB);
        (uint256 actualA, uint256 actualB,) = pool.addLiquidity(amountA, amountB);
        console2.log("Actual amounts added - A:", actualA, "B:", actualB);
        
        // Should use the smaller amount (amountA) for both tokens
        assertEq(actualA, amountA, "Incorrect token A amount");
        assertEq(actualB, amountA, "Token B amount should match A for first deposit");
        vm.stopPrank();
    }

    function testMinimumLiquidity() public {
        vm.prank(alice);
        (,, uint256 lpTokens) = pool.addLiquidity(INITIAL_LIQUIDITY, INITIAL_LIQUIDITY);
        assertGt(lpTokens, pool.MINIMUM_LIQUIDITY(), "LP tokens should be greater than minimum liquidity");
    }

    function test_RevertWhen_RemovingTooMuchLiquidity() public {
        vm.startPrank(alice);
        (,, uint256 lpTokens) = pool.addLiquidity(INITIAL_LIQUIDITY, INITIAL_LIQUIDITY);
        
        
        vm.expectRevert("ERC20: burn amount exceeds balance"); 
        pool.removeLiquidity(lpTokens + 1); // Try to remove more than available
        vm.stopPrank();
    }
}```

### File: test/PaymentChannelTest.sol
```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test, console2} from "forge-std/Test.sol";
import {PaymentChannel} from "../src/PaymentChannel.sol";
import "openzeppelin-contracts/utils/cryptography/ECDSA.sol";

contract PaymentChannelTest is Test {
    using ECDSA for bytes32;
    
    PaymentChannel public channel;
    address public payer;
    uint256 public payerPrivateKey;
    address public payee;
    uint256 public initialDeposit;
    uint256 public duration;

    function setUp() public {
        // Create deterministic addresses using private key
        payerPrivateKey = 0x1234; // Use a known private key
        payer = vm.addr(payerPrivateKey);
        payee = makeAddr("payee");
        initialDeposit = 1 ether;
        duration = 1 days;

        // Fund the payer account
        vm.deal(payer, 10 ether);

        // Create channel as payer
        vm.prank(payer);
        channel = new PaymentChannel{value: initialDeposit}(payee, duration);
    }

    function testChannelDeployment() public view {
        assertEq(channel.payer(), payer);
        assertEq(channel.payee(), payee);
        assertEq(address(channel).balance, initialDeposit);
        assertEq(channel.depositAmount(), initialDeposit);
        assertTrue(channel.expiresAt() > block.timestamp);
    }

    function testSignatureVerification() public view {
        uint256 amount = 0.5 ether;
        
        // Create signature as payer
        bytes32 messageHash = channel.getHash(amount);
        bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(messageHash);
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(payerPrivateKey, ethSignedMessageHash);
        bytes memory signature = abi.encodePacked(r, s, v);

        // Verify signature
        assertTrue(channel.verify(amount, signature));
    }

    function testClaimPayment() public {
        uint256 amount = 0.5 ether;
        
        // Create signature as payer
        bytes32 messageHash = channel.getHash(amount);
        bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(messageHash);
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(payerPrivateKey, ethSignedMessageHash);
        bytes memory signature = abi.encodePacked(r, s, v);

        // Record balances before claim
        uint256 payeeBalanceBefore = payee.balance;
        uint256 payerBalanceBefore = payer.balance;

        // Claim payment as payee
        vm.prank(payee);
        channel.claim(amount, signature);

        // Verify balances after claim
        assertEq(payee.balance, payeeBalanceBefore + amount);
        assertEq(payer.balance, payerBalanceBefore + (initialDeposit - amount));
        assertTrue(channel.isClosed());
    }

    function testRefund() public {
        // Fast forward past expiration
        vm.warp(block.timestamp + duration + 1);

        // Record balance before refund
        uint256 payerBalanceBefore = payer.balance;

        // Claim refund as payer
        vm.prank(payer);
        channel.refund();

        // Verify balances
        assertEq(payer.balance, payerBalanceBefore + initialDeposit);
        assertTrue(channel.isClosed());
    }

    function testChannelExtension() public {
        uint256 initialExpiration = channel.expiresAt();
        uint256 newDuration = 2 days;

        // Extend channel as payer
        vm.prank(payer);
        channel.extend(newDuration);

        // Verify new expiration
        assertTrue(channel.expiresAt() > initialExpiration);
        assertEq(channel.expiresAt(), block.timestamp + newDuration);
    }

    function test_RevertWhen_ClaimingAfterExpiration() public {
        uint256 amount = 0.5 ether;
        
        // Create signature as payer
        bytes32 messageHash = channel.getHash(amount);
        bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(messageHash);
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(payerPrivateKey, ethSignedMessageHash);
        bytes memory signature = abi.encodePacked(r, s, v);

        // Fast forward past expiration
        vm.warp(block.timestamp + duration + 1);

        // Try to claim (should fail)
        vm.expectRevert("Channel has expired");
        vm.prank(payee);
        channel.claim(amount, signature);
    }

    function test_RevertWhen_DoubleSpending() public {
        uint256 amount = 0.5 ether;
        
        // Create signature as payer
        bytes32 messageHash = channel.getHash(amount);
        bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(messageHash);
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(payerPrivateKey, ethSignedMessageHash);
        bytes memory signature = abi.encodePacked(r, s, v);

        // First claim
        vm.prank(payee);
        channel.claim(amount, signature);

        // Second claim (should fail)
        vm.expectRevert("Channel is closed");
        vm.prank(payee);
        channel.claim(amount, signature);
    }
}```

### File: script/Deploy.s.sol
```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Script} from 'forge-std/Script.sol';

contract DeployScript is Script {
    function run() external {}
}
```

--------------------------------------------------------

Aggregation complete. All information is in 'aggregated_for_analysis.txt'.
